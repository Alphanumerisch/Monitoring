filter {
  # Nur iLO-Events anfassen:
  if [service][name] == "ilo"
     or [service][type] == "ilo"
     or "ilo.metrics" in [event][dataset]
     or "ilo.thermal" in [event][dataset] {

    # @timestamp (ISO8601) sauber setzen - nur wenn noch String
    if [@timestamp] and ([@timestamp] =~ "^\d{4}-") {
      date {
        match   => ["@timestamp", "ISO8601"]
        target  => "@timestamp"
        timezone => "UTC"
        tag_on_failure => ["_dateparsefailure_ilo"]
      }
    }

    # ECS-Defaults absichern
    mutate {
      add_field => {
        "[service][type]" => "ilo"
        "[event][kind]"   => "metric"
      }
    }
    if ![event][category] { mutate { add_field => { "[event][category]" => "hardware" } } }
    if ![event][type]     { mutate { add_field => { "[event][type]"     => "info"     } } }

    # dataset vereinheitlichen (deine Edge liefert Array ["ilo.thermal","ilo.metrics"])
    mutate {
      replace => { "[event][dataset]" => "ilo.thermal" }
    }

    # Typen festnageln (Mapping-Sicherheit)
    mutate {
      convert => {
        "[metrics][temperature][celsius]"                      => "float"
        "[hpe][ilo][sensor][thresholds][upper_critical]"       => "float"
        "[hpe][ilo][sensor][thresholds][upper_fatal]"          => "float"
        "[hpe][ilo][sensor][thresholds][warning_user]"         => "float"
        "[hpe][ilo][sensor][thresholds][critical_user]"        => "float"
      }
    }

    # Nil/0-Werte aufräumen
    if [hpe][ilo][sensor][thresholds][upper_fatal] and [hpe][ilo][sensor][thresholds][upper_fatal] == 0 {
      mutate { remove_field => [ "[hpe][ilo][sensor][thresholds][upper_fatal]" ] }
    }
    ruby {
      code => '
        def deep_compact!(h)
          h.keys.each do |k|
            v = h[k]
            if v.is_a?(Hash)
              deep_compact!(v)
              h.delete(k) if v.empty?
            elsif v.nil?
              h.delete(k)
            end
          end
        end
        if event.get("hpe").is_a?(Hash)
          deep_compact!(event.get("hpe"))
        end
      '
    }

    # Nur sinnvolle Messwerte
    if ![metrics][temperature][celsius] or [metrics][temperature][celsius] <= 0 {
      drop { }
    }

    # Kunde: du sendest already labels.kunde vom Edge – passt.
    # (Fallback per translate macht hier keinen Sinn, da RZ @metadata.ip_address=127.0.0.1 durch den Forwarder ist.)

    # Zielalias für ES (konsistent zu deinem Veeam-Filter):
    mutate {
      add_field => { "[@metadata][es_alias]" => "metrics-%{[labels][kunde]}-ilo-write" }
    }
  }
}
