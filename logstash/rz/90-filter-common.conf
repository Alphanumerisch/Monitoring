filter {
  # Zeitpunkt der Annahme im RZ (für Latenzanalysen)
  mutate { add_field => { "[event][ingested]" => "%{@timestamp}" } }

  # ECS-Version dokumentieren (global einheitlich)
  mutate { add_field => { "[ecs][version]" => "8.11.0" } }

  # --- host: Top-Level-String sicher in ECS host.* überführen ---
  # Fall A: host ist ein STRING (weder host.ip noch host.name existieren)
  if [host] and ![host][ip] and ![host][name] {
    # 1) String zwischenspeichern (bevor wir host löschen)
    mutate { add_field => { "[@metadata][host_str]" => "%{host}" } }

    # 2) host entfernen, damit wir ein Objekt neu anlegen können
    mutate { remove_field => ["host"] }

    # 3) Entscheiden: IP oder Name?
    if [@metadata][host_str] =~ /^\d{1,3}(\.\d{1,3}){3}$/ or [@metadata][host_str] =~ /:/ {
      mutate { add_field => { "[host][ip]" => "%{[@metadata][host_str]}" } }
    } else {
      mutate { add_field => { "[host][name]" => "%{[@metadata][host_str]}" } }
    }

    # 4) Cleanup
    mutate { remove_field => ["[@metadata][host_str]"] }
  }

  # Fall B: host.name aus observer.hostname ergänzen (falls noch leer)
  if [observer][hostname] and ![host][name] {
    mutate { add_field => { "[host][name]" => "%{[observer][hostname]}" } }
  }

  # Transport-/Input-Artefakte entfernen
  mutate { remove_field => ["port", "[@metadata][input]"] }

  # Alte Fehler-Tags wegräumen (optional)
  mutate { remove_tag => ["_rubyexception_common_hostfix", "_mutate_error"] }

  # Mandant sollte von der Edge kommen – sonst Fallback
  if !([labels] and [labels][kunde]) {
    mutate { add_field => { "[labels][kunde]" => "unknown" } }
  }
}
